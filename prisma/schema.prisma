generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agencies {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  createdAt   DateTime      @db.Timestamptz(6)
  updatedAt   DateTime      @db.Timestamptz(6)
  deletedAt   DateTime?     @db.Timestamptz(6)
  AgencyUsers AgencyUsers[]
}

model AgencyUserRoles {
  id           Int          @id @default(autoincrement())
  agencyUserId Int?
  roleId       Int?
  createdAt    DateTime     @db.Timestamptz(6)
  updatedAt    DateTime     @db.Timestamptz(6)
  deletedAt    DateTime?    @db.Timestamptz(6)
  AgencyUsers  AgencyUsers? @relation(fields: [agencyUserId], references: [id])
  Roles        Roles?       @relation(fields: [roleId], references: [id])
}

model AgencyUserServices {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @db.Timestamptz(6)
  updatedAt    DateTime    @db.Timestamptz(6)
  deletedAt    DateTime?   @db.Timestamptz(6)
  serviceId    Int
  agencyUserId Int
  AgencyUsers  AgencyUsers @relation(fields: [agencyUserId], references: [id])
  Services     Services    @relation(fields: [serviceId], references: [id])
}

model AgencyUsers {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  agencyId           Int
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  Agencies           Agencies             @relation(fields: [agencyId], references: [id])
  Users              Users                @relation(fields: [userId], references: [id])
  AgencyUserRoles    AgencyUserRoles[]
  AgencyUserServices AgencyUserServices[]
  Visits             Visits[]

  @@unique([agencyId, userId], name: "unique_constraint_with_user_and_agency")
}

model Clients {
  id          Int       @id @default(autoincrement())
  userId      Int?
  createdAt   DateTime  @db.Timestamptz(6)
  updatedAt   DateTime  @db.Timestamptz(6)
  deletedAt   DateTime? @db.Timestamptz(6)
  approvedAt  DateTime? @db.Timestamptz(6)
  city        String    @db.VarChar(255)
  country     String    @db.VarChar(255)
  line1       String    @db.VarChar(255)
  line2       String?   @db.VarChar(255)
  postalCode  String    @db.VarChar(255)
  state       String    @db.VarChar(255)
  fullName    String    @db.VarChar(255)
  phoneNumber String?   @db.VarChar(255)
  Users       Users?    @relation(fields: [userId], references: [id])
  Visits      Visits[]
}

model InternalUserRoles {
  id             Int            @id @default(autoincrement())
  internalUserId Int?
  roleId         Int?
  createdAt      DateTime       @db.Timestamptz(6)
  updatedAt      DateTime       @db.Timestamptz(6)
  deletedAt      DateTime?      @db.Timestamptz(6)
  InternalUsers  InternalUsers? @relation(fields: [internalUserId], references: [id])
  Roles          Roles?         @relation(fields: [roleId], references: [id])
}

model InternalUsers {
  id                Int                 @id @default(autoincrement())
  userId            Int?
  createdAt         DateTime            @db.Timestamptz(6)
  updatedAt         DateTime            @db.Timestamptz(6)
  deletedAt         DateTime?           @db.Timestamptz(6)
  Users             Users?              @relation(fields: [userId], references: [id])
  InternalUserRoles InternalUserRoles[]
}

model Roles {
  id                Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(255)
  createdAt         DateTime            @db.Timestamptz(6)
  updatedAt         DateTime            @db.Timestamptz(6)
  isInternalRole    Boolean?
  isAgencyRole      Boolean?
  deletedAt         DateTime?           @db.Timestamptz(6)
  AgencyUserRoles   AgencyUserRoles[]
  InternalUserRoles InternalUserRoles[]
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model Services {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  deletedAt          DateTime?            @db.Timestamptz(6)
  name               String               @db.VarChar(255)
  fee                Int
  description        String?              @db.VarChar(255)
  AgencyUserServices AgencyUserServices[]
  VisitServices      VisitServices[]
}

model Tokens {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @db.Timestamptz(6)
  updatedAt   DateTime @db.Timestamptz(6)
  expiresAt   DateTime @db.Timestamptz(6)
  userId      Int
  token       String   @db.VarChar(255)
  type        String   @db.VarChar(255)
  blacklisted Boolean
  Users       Users    @relation(fields: [userId], references: [id])
}

model Users {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @db.Timestamptz(6)
  updatedAt     DateTime        @db.Timestamptz(6)
  email         String          @unique @db.VarChar(255)
  fullName      String?         @db.VarChar(255)
  auth0Id       String?         @unique @db.VarChar(255)
  deletedAt     DateTime?       @db.Timestamptz(6)
  customerId    String?         @db.VarChar(255)
  phoneNumber   String?         @db.VarChar(255)
  password      String?         @db.VarChar(255)
  AgencyUsers   AgencyUsers[]
  Clients       Clients[]
  InternalUsers InternalUsers[]
  Tokens        Tokens[]
  Visits        Visits[]
}

model VisitServices {
  id        Int       @id @default(autoincrement())
  visitId   Int
  serviceId Int
  name      String?   @db.VarChar(256)
  fee       Int?
  createdAt DateTime? @db.Timestamptz(6)
  updatedAt DateTime? @db.Timestamptz(6)
  deletedAt DateTime? @db.Timestamptz(6)
  Services  Services  @relation(fields: [serviceId], references: [id])
  Visits    Visits    @relation(fields: [visitId], references: [id])
}

model Visits {
  id              Int             @id @default(autoincrement())
  clientId        Int?
  userId          Int?
  agencyUserId    Int?
  notes           String?         @db.VarChar(255)
  city            String          @db.VarChar(255)
  country         String          @db.VarChar(255)
  state           String          @db.VarChar(256)
  line1           String          @db.VarChar(256)
  line2           String?         @db.VarChar(256)
  postalCode      String          @db.VarChar(256)
  releasedAt      DateTime?       @db.Timestamptz(6)
  matchedAt       DateTime?       @db.Timestamptz(6)
  startedAt       DateTime?       @db.Timestamptz(6)
  finishedAt      DateTime?       @db.Timestamptz(6)
  cancelledAt     DateTime?       @db.Timestamptz(6)
  createdAt       DateTime?       @db.Timestamptz(6)
  updatedAt       DateTime?       @db.Timestamptz(6)
  deletedAt       DateTime?       @db.Timestamptz(6)
  baseFee         Int?
  paymentIntentId String?         @db.VarChar(255)
  AgencyUsers     AgencyUsers?    @relation(fields: [agencyUserId], references: [id])
  Clients         Clients?        @relation(fields: [clientId], references: [id])
  Users           Users?          @relation(fields: [userId], references: [id])
  VisitServices   VisitServices[]
}
